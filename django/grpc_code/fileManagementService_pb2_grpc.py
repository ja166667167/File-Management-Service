# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from grpc_code import fileManagementService_pb2 as grpc__code_dot_fileManagementService__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in grpc_code/fileManagementService_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class FileManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRecords = channel.unary_unary(
            '/grpc_server.FileManagementService/GetRecords',
            request_serializer=grpc__code_dot_fileManagementService__pb2.GetRecordsRequest.SerializeToString,
            response_deserializer=grpc__code_dot_fileManagementService__pb2.GetRecordResponse.FromString,
            _registered_method=True)
        self.UploadRecord = channel.unary_unary(
            '/grpc_server.FileManagementService/UploadRecord',
            request_serializer=grpc__code_dot_fileManagementService__pb2.UploadRecordRequest.SerializeToString,
            response_deserializer=grpc__code_dot_fileManagementService__pb2.UploadResponse.FromString,
            _registered_method=True)
        self.GetParticularRecords = channel.unary_unary(
            '/grpc_server.FileManagementService/GetParticularRecords',
            request_serializer=grpc__code_dot_fileManagementService__pb2.GetPtclrRecordsRequest.SerializeToString,
            response_deserializer=grpc__code_dot_fileManagementService__pb2.GetPtclrRecordsResponse.FromString,
            _registered_method=True)
        self.DeleteRecord = channel.unary_unary(
            '/grpc_server.FileManagementService/DeleteRecord',
            request_serializer=grpc__code_dot_fileManagementService__pb2.DelRecordsRequest.SerializeToString,
            response_deserializer=grpc__code_dot_fileManagementService__pb2.DelRecordsResponse.FromString,
            _registered_method=True)


class FileManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParticularRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetRecords': grpc.unary_unary_rpc_method_handler(
            servicer.GetRecords,
            request_deserializer=grpc__code_dot_fileManagementService__pb2.GetRecordsRequest.FromString,
            response_serializer=grpc__code_dot_fileManagementService__pb2.GetRecordResponse.SerializeToString,
        ),
        'UploadRecord': grpc.unary_unary_rpc_method_handler(
            servicer.UploadRecord,
            request_deserializer=grpc__code_dot_fileManagementService__pb2.UploadRecordRequest.FromString,
            response_serializer=grpc__code_dot_fileManagementService__pb2.UploadResponse.SerializeToString,
        ),
        'GetParticularRecords': grpc.unary_unary_rpc_method_handler(
            servicer.GetParticularRecords,
            request_deserializer=grpc__code_dot_fileManagementService__pb2.GetPtclrRecordsRequest.FromString,
            response_serializer=grpc__code_dot_fileManagementService__pb2.GetPtclrRecordsResponse.SerializeToString,
        ),
        'DeleteRecord': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteRecord,
            request_deserializer=grpc__code_dot_fileManagementService__pb2.DelRecordsRequest.FromString,
            response_serializer=grpc__code_dot_fileManagementService__pb2.DelRecordsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'grpc_server.FileManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        'grpc_server.FileManagementService', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class FileManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRecords(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc_server.FileManagementService/GetRecords',
            grpc__code_dot_fileManagementService__pb2.GetRecordsRequest.SerializeToString,
            grpc__code_dot_fileManagementService__pb2.GetRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadRecord(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc_server.FileManagementService/UploadRecord',
            grpc__code_dot_fileManagementService__pb2.UploadRecordRequest.SerializeToString,
            grpc__code_dot_fileManagementService__pb2.UploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetParticularRecords(request,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc_server.FileManagementService/GetParticularRecords',
            grpc__code_dot_fileManagementService__pb2.GetPtclrRecordsRequest.SerializeToString,
            grpc__code_dot_fileManagementService__pb2.GetPtclrRecordsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRecord(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc_server.FileManagementService/DeleteRecord',
            grpc__code_dot_fileManagementService__pb2.DelRecordsRequest.SerializeToString,
            grpc__code_dot_fileManagementService__pb2.DelRecordsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
